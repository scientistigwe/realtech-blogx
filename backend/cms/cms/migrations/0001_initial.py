# Generated by Django 5.1 on 2024-08-21 17:11

import cms.models.custom_user_model
import cms.models.post_model
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('slug', models.SlugField(unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, null=True)),
                ('website', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator()])),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to=cms.models.custom_user_model.profile_picture_upload_to)),
                ('twitter_handle', models.URLField(blank=True, null=True)),
                ('facebook_profile', models.URLField(blank=True, null=True)),
                ('linkedin_profile', models.URLField(blank=True, null=True)),
                ('last_active', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_author', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_users', related_query_name='custom_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_users', related_query_name='custom_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('content', models.TextField()),
                ('excerpt', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=10)),
                ('meta_description', models.TextField(blank=True, null=True)),
                ('meta_title', models.CharField(blank=True, max_length=255, null=True)),
                ('publication_date', models.DateField(blank=True, null=True)),
                ('meta_keywords', models.CharField(blank=True, max_length=255, null=True)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('is_public', models.BooleanField(default=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to=cms.models.post_model.post_thumbnail_upload_to)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('primary_category', models.CharField(choices=[('data', 'Data'), ('data_analysis', 'Data Analysis'), ('python_development', 'Python Development'), ('backend_development', 'Backend Development'), ('devops', 'DevOps'), ('cloud_engineering', 'Cloud Engineering'), ('artificial_intelligence', 'Artificial Intelligence'), ('machine_learning', 'Machine Learning'), ('data_science', 'Data Science'), ('web_development', 'Web Development'), ('mobile_development', 'Mobile Development'), ('security', 'Security'), ('game_development', 'Game Development')], default='data', max_length=50)),
                ('subcategory', models.CharField(blank=True, choices=[('data_science', 'Data Science'), ('data_engineering', 'Data Engineering'), ('big_data', 'Big Data'), ('data_visualization', 'Data Visualization'), ('databases', 'Databases'), ('data_privacy_security', 'Data Privacy and Security'), ('data_migration', 'Data Migration'), ('etl', 'ETL (Extract, Transform, Load)'), ('data_cleaning', 'Data Cleaning'), ('data_integration', 'Data Integration'), ('data_governance', 'Data Governance'), ('statistical_analysis', 'Statistical Analysis'), ('machine_learning', 'Machine Learning'), ('nlp', 'Natural Language Processing (NLP)'), ('data_mining', 'Data Mining'), ('predictive_analytics', 'Predictive Analytics'), ('time_series_analysis', 'Time Series Analysis'), ('business_intelligence', 'Business Intelligence'), ('text_analysis', 'Text Analysis'), ('sentiment_analysis', 'Sentiment Analysis'), ('python_basics', 'Python Basics'), ('python_libraries', 'Python Libraries'), ('django_framework', 'Django Framework'), ('flask_framework', 'Flask Framework'), ('python_for_data_science', 'Python for Data Science'), ('python_for_web_development', 'Python for Web Development'), ('python_for_scientific_computing', 'Python for Scientific Computing'), ('python_automation', 'Python Automation'), ('python_for_networking', 'Python for Networking'), ('python_for_testing', 'Python for Testing'), ('api_development', 'API Development'), ('microservices_architecture', 'Microservices Architecture'), ('database_design', 'Database Design'), ('web_frameworks', 'Web Frameworks'), ('server_administration', 'Server Administration'), ('performance_tuning', 'Performance Tuning'), ('cache_management', 'Cache Management'), ('backend_security', 'Backend Security'), ('application_architecture', 'Application Architecture'), ('message_brokers', 'Message Brokers'), ('ci_cd_pipelines', 'CI/CD Pipelines'), ('infrastructure_as_code', 'Infrastructure as Code (IaC)'), ('containerization', 'Containerization'), ('cloud_platforms', 'Cloud Platforms'), ('monitoring_logging', 'Monitoring and Logging'), ('devops_tools', 'DevOps Tools'), ('security_operations', 'Security Operations'), ('configuration_management', 'Configuration Management'), ('system_automation', 'System Automation'), ('build_automation', 'Build Automation'), ('cloud_computing_fundamentals', 'Cloud Computing Fundamentals'), ('cloud_security', 'Cloud Security'), ('serverless_computing', 'Serverless Computing'), ('cloud_migration', 'Cloud Migration'), ('cloud_cost_optimization', 'Cloud Cost Optimization'), ('multicloud_strategy', 'Multicloud Strategy'), ('cloud_natives', 'Cloud Natives'), ('cloud_monitoring', 'Cloud Monitoring'), ('cloud_automation', 'Cloud Automation'), ('edge_computing', 'Edge Computing'), ('general_ai', 'General AI'), ('computer_vision', 'Computer Vision'), ('robotics', 'Robotics'), ('reinforcement_learning', 'Reinforcement Learning'), ('ai_ethics', 'AI Ethics'), ('ai_policy', 'AI Policy'), ('knowledge_graph', 'Knowledge Graph'), ('supervised_learning', 'Supervised Learning'), ('unsupervised_learning', 'Unsupervised Learning'), ('deep_learning', 'Deep Learning'), ('neural_networks', 'Neural Networks'), ('model_evaluation', 'Model Evaluation'), ('feature_engineering', 'Feature Engineering'), ('hyperparameter_tuning', 'Hyperparameter Tuning'), ('ml_pipelines', 'ML Pipelines'), ('exploratory_data_analysis', 'Exploratory Data Analysis'), ('statistical_modeling', 'Statistical Modeling'), ('data_management', 'Data Management'), ('data_discovery', 'Data Discovery'), ('data_quality', 'Data Quality'), ('data_sharing', 'Data Sharing'), ('frontend_development', 'Frontend Development'), ('javascript_frameworks', 'JavaScript Frameworks'), ('responsive_design', 'Responsive Design'), ('web_performance', 'Web Performance'), ('user_experience', 'User Experience (UX)'), ('user_interface', 'User Interface (UI)'), ('android_development', 'Android Development'), ('ios_development', 'iOS Development'), ('cross_platform_development', 'Cross-Platform Development'), ('mobile_user_experience', 'Mobile User Experience'), ('mobile_security', 'Mobile Security'), ('mobile_performance', 'Mobile Performance'), ('network_security', 'Network Security'), ('application_security', 'Application Security'), ('penetration_testing', 'Penetration Testing'), ('incident_response', 'Incident Response'), ('vulnerability_management', 'Vulnerability Management'), ('security_compliance', 'Security Compliance'), ('game_engine', 'Game Engine'), ('game_design', 'Game Design'), ('3d_modeling', '3D Modeling'), ('game_animation', 'Game Animation'), ('multiplayer_gaming', 'Multiplayer Gaming'), ('vr_ar_development', 'VR/AR Development')], max_length=50, null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('upvotes', models.PositiveIntegerField(default=0)),
                ('downvotes', models.PositiveIntegerField(default=0)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, related_name='posts', to='cms.tag')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sentiment_score', models.FloatField(blank=True, null=True)),
                ('moderation_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('upvotes', models.PositiveIntegerField(default=0)),
                ('downvotes', models.PositiveIntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='cms.post')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PostEngagement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clicks', models.PositiveIntegerField(default=0)),
                ('sessions', models.PositiveIntegerField(default=0)),
                ('conversions', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='engagement', to='cms.post')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['title'], name='cms_post_title_318ee0_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['view_count'], name='cms_post_view_co_b2efe2_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['search_vector'], name='cms_post_search__9c25aa_idx'),
        ),
    ]
